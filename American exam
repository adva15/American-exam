? מהו תפקיד המתודה init שאלה 1: במחלקת פייתון 
תשובה א. ליצור מופע חדש של המחלקה ולבצע בו אתחול של משתנים

מה ההבדל המרכזי בין @staticmethod ל־@classmethod שאלה 2: בפייתון 
 @classmethod מקבל את המחלקה כפרמטר ראשון (cls), ו־@staticmethod תשובה ב. לא מקבל אובייקט בכלל 

? מהי מטרת השיטה str שאלה 3: במחלקת פייתון 
תשובה ב. להחזיר ייצוג טקסטואלי של האובייקט כשמדפיסים אותו 

שאלה 4: מה קורה כאשר מפעילים את האופרטור == על שני מופעים מאותה מחלקה בלי להגדיר את eq
ג. ההשוואה תתבצע לפי כתובת הזיכרון של המופעים

?שאלה 5: מה נדרש כדי להפוך מחלקה לאיטרטור בפייתון
ב. לממש את המתודות iter ו-next .תשובה ב


 hash שאלה 6: מהו ואיזה תפקיד הוא ממלא ש 
מחזיר ערך מספרי ייחודי שמייצג את האובייקט עבור שימוש במבני נתונים כמו dict או set .תשובה ב

? מה מאפשרת המתודה add שאלה 7: כאשר היא מוגדרת במחלקה 
תשובה ב. שימוש באופרטור + בין מופע של המחלקה לכל אובייקט שתואם את הלוגיקה שבמתודה

? מה יקרה אם נממש eq אך לא נממש hash וננסה להשתמש במופע של המחלקה כ־ key במילון (dict) :שאלה 8
ג. תתקבל שגיאה מסוג TypeError 

? מה היתרון המרכזי בשימוש במחלקה מופשטת (abstract base class) שאלה 9: בפייתון 
תשובה ג. היא מגדירה ממשק מחייב למחלקות שיורשות ממנה

מה יקרה אם ננסה ליצור מופע ממחלקה שמוגדרת כ־ abstract ויש בה מתודה אחת abstractשאלה 10: שלא מומשה
לדעתי זה הנכון יותר. תשובה ג. תתקבל שגיאה בזמן יצירת מופע 

מהי התוצאה של ניסיון לרשת ממחלקה שמסומנת כ־abstract אך לא לממש את כל המתודות ה־abstract :שאלה 11
תשובה ב. תתקבל שגיאה בזמן יצירת מופע מהמחלקה היורשת

מה קורה כאשר שני threads שאלה 12: ניגשים לאותו משתנה בזיכרון בלי סנכרון מתאים
התוצאה עלולה להיות לא צפויה בגלל מצב של race conditionתשובה ג. ג

שאלה 13: מה ההבדל בין *args ל־**kwargs שאלה 13: בפייתון 
*args אוסף ארגומנטים לפי מיקום ו־**kwargs תשובה ג. אוסף ארגומנטים לפי מפתח

?למה משמשת המתודה hash שאלה 14: בפייתון
 כדי לאפשר שימוש באובייקט כמפתח במילון או כחבר בקבוצת set: תשובה ב

מהי המשמעות של GIL (Global Interpreter Lock) שאלה 15: בפייתון 
 מגביל את פייתון כך שרק thread תשובה ב. אחד יכול להריץ קוד פייתון בכל רגע נתון

 מה היתרון המרכזי של שימוש ב־logging על פני print שאלה 16: בפייתון
. logging תשובה ג. מאפשר רמות דיווח שונות וכתיבה לקובץ או קונסולה

? שאלה 17: מה תהיה תוצאת הריצה של הקוד הבא 
 יודפס "Done" ואז תיזרק שגיאת ZeroDivisionError כי אין except תשובה ג. מתאים 

שאלה 18: הקוד הבא רץ לאט וצורך הרבה זיכרון
ג. להשתמש ב־memory_profiler עם @profile תשובה ג. כדי למדוד שימוש בזיכרון

? מהו מצב של cycle reference  שאלה 19: בפייתון
תשובה ב. מצב שבו שני אובייקטים מחזיקים הפניה אחד לשני, כך שלא ניתן לפנות את הזיכרון

שאלה 20: מה תהיה תוצאת הריצה של הקוד הבא מבחינת ניהול זיכרון
תשובה ב: שני האובייקטים יישארו בזיכרון כי יש ביניהם הפניה מעגליתס 

? יש לך שני קבצים module_a.py ו־module_b.py, שאלה 21: שכל אחד מהם מייבא פונקציה מהשני
 לשים את ה־import תשובה ב. בתוך הפונקציה שזקוקה לו

? מהי המשמעות של Reference Count שאלה 22: בפייתון 
תשובה א. מספר הפעמים שאובייקט שונה את ערכו

? שאלה 23: למה משמשת Weak Reference שאלה 23: בפייתון 
 היא מחזיקה הפניה לאובייקט בלי למנוע מה־ garbage collector תשובה ב. למחוק אותו

שאלה 24: מה היתרון בהגדרת תכונה כ־private עם __name ושימוש ב־getter ו־setter שאלה 24: עבורה
.תשובה ג. מאפשר שליטה על גישה, אימות ולוגיקה לפני קריאה או שינוי של הערך

 למה נשתמש ב־ multiprocessing במקום ב־ threading שאלה 25: בפייתון 
 כי multiprocessing עוקף את מגבלת ה־ GIL תשובה ג. ולכן מתאים לעומסים חישוביים


תלתן, לב אדום 
הכי טוב שימוש ב- ENAM 

בבונוס צריך לשים דקורטוק של דק ציטיניג ארור , בדיקה עד 52 קלפים 
